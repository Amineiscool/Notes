Creational Patterns:

Singleton: Ensures only a single instance of a class exists throughout the application.
Factory Method: Provides an interface for creating objects, but allows subclasses to decide which class to instantiate.
Abstract Factory: Provides an interface for creating families of related or dependent objects.
Builder: Allows the creation of complex objects step by step, providing control over the construction process.
Structural Patterns:

Adapter: Allows objects with incompatible interfaces to work together by wrapping one object with another.
Decorator: Dynamically adds new behavior to an object by wrapping it with additional classes.
Proxy: Provides a surrogate or placeholder for another object to control access to it.
Composite: Composes objects into tree structures to represent part-whole hierarchies.
Behavioral Patterns:

Observer: Defines a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified and updated automatically.
Strategy: Enables selecting an algorithm at runtime from a family of interchangeable algorithms.
Command: Encapsulates a request as an object, allowing parameterization of clients with different requests, queues, or log requests.
Iterator: Provides a way to access elements of an aggregate object sequentially without exposing its underlying representation.
Architectural Patterns:

Model-View-Controller (MVC): Separates an application into three interconnected components - the model (data and business logic), the view (user interface), and the controller (handles user input and updates the model and view).
Repository: Mediates between the domain and data mapping layers, providing a separation between the data access logic and the business logic.
Dependency Injection: Allows the separation of object creation and dependency resolution, making code more modular and testable.
Service-Oriented Architecture (SOA): Structures an application as a collection of loosely coupled services that communicate with each other over a network.
